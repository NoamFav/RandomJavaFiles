import java.util.ArrayList;
import java.util.Arrays;

class Poker{
    static String[] deck = {"cA", "cK", "cQ", "cJ", "c10", "c9", "c8", "c7", "c6", "c5", "c4", "c3", "c2",  // Clovers
                          "pA", "pK", "pQ", "pJ", "p10", "p9", "p8", "p7", "p6", "p5", "p4", "p3", "p2",    // Pickes
                          "hA", "hK", "hQ", "hJ", "h10", "h9", "h8", "h7", "h6", "h5", "h4", "h3", "h2",    // Hearts
                          "dA", "dK", "dQ", "dJ", "d10", "d9", "d8", "d7", "d6", "d5", "d4", "d3", "d2"};   // Diamonds

    static String[][] player_combinations = new String[0][5];
    static String[][] opponent_combinations = new String[0][5];
    
    ArrayManipulation converter = new ArrayManipulation();

    public static void main (String[] args) {
        String[] cards = {"c2", "c3", "c4", "c5", "c6", "c7"};
        Poker p = new Poker();      // This statement requires knowledge about Object-Oriented Programming (more in CS2)

        // Example to validate your implementation of method deleteCards
        String[] discard = {"c4"};
        String[] newCards = p.discard_cards(cards, discard);
        System.out.println(Arrays.toString(newCards));
        // The following call must print the following combination (order of the elements inside the combination does not matter):
        //  "c2", "c3", "c5", "c6", "c7"

        // Example to validate your implementation of method possible_hands
        p.possible_hands(cards, new String[0]);
        // The following call must print the following combinations (order of combinations and/or elements inside the combinations do not matter):
        //  "c2", "c3", "c4", "c5", "c6"
        //  "c2", "c3", "c4", "c5", "c7"
        //  "c2", "c3", "c4", "c6", "c7"
        //  "c2", "c3", "c5", "c6", "c7"
        //  "c2", "c4", "c5", "c6", "c7"
        //  "c3", "c4", "c5", "c6", "c7"
        System.out.println(Arrays.deepToString(Poker.player_combinations));

        // Example to validate your implementation of method possible_hands_opponent
        String[] cardsOnCommunity = {"c2", "c3", "c4"};
        String[] cardsAvailable = {"c2", "c3", "c4", "c5", "c6", "c7"};
        p.possible_hands_opponent(cardsAvailable, cardsOnCommunity, new String[0]);
        // The following call must print the following combinations (order of combinations and/or elements inside the combinations do not matter):
        //  "c2", "c3", "c4", "c5", "c6"
        //  "c2", "c3", "c4", "c5", "c7"
        //  "c2", "c3", "c4", "c6", "c7"
        System.out.println(Arrays.deepToString(Poker.opponent_combinations));
        
    }

    public String[] discard_cards(String[] initialCards, String[] cardsToDiscard) {
        // Write your code below

        if (cardsToDiscard.length == 0) {
            return initialCards;
        }
        else {
            ArrayList<String> nextLvl = converter.Array2ArrayList(cardsToDiscard);
            nextLvl.remove(0);

            for (int i = 0; i < initialCards.length; i++) {
                if (initialCards[i] == cardsToDiscard[0]) {
                    ArrayList<String> temp = converter.Array2ArrayList(initialCards);
                    temp.remove(i);

                    return discard_cards(converter.ArrayList2Array(temp), converter.ArrayList2Array(nextLvl));
                }
            }
            return discard_cards(initialCards, converter.ArrayList2Array(nextLvl));
        }


        // Write your code above
    }

    public void possible_hands (String[] cardsAvailable, String[] cardsOnHands) {
        // Write your code below
        if (cardsOnHands.length == 5) {
            String[][] temp = new String[player_combinations.length + 1][5];
            for (int i = 0; i < player_combinations.length; i++) {
                temp[i] = player_combinations[i];
            }
            temp[player_combinations.length] = cardsOnHands;
            player_combinations = temp;

            System.out.println(Arrays.toString(cardsOnHands));
        }  
        else if (cardsAvailable.length >= (5 - cardsOnHands.length)) {
            ArrayList<String> cards = converter.Array2ArrayList(cardsAvailable);
            cards.remove(0);

            ArrayList<String> temp = converter.Array2ArrayList(cardsOnHands);
            temp.add(cardsAvailable[0]);

            possible_hands(converter.ArrayList2Array(cards), cardsOnHands);
            possible_hands(converter.ArrayList2Array(cards), converter.ArrayList2Array(temp));
        }


        // Write your code above
    }

    public void possible_hands_opponent (String[] cardsAvailable, String[] cardsOnCommunity, String[] cardsOnHands) {
        if (cardsOnHands.length == 5) {
            boolean valid = true;
            int fromCommunity = 0;

            for (int i = 0 ; i<cardsOnHands.length - 1; i++) {
                for (int y = i + 1; y < cardsOnHands.length; y++) {
                    if (cardsOnHands[i] == cardsOnHands[y]) {
                        valid = false;
                    }
                }
            }
            for (int i =0; i <cardsOnHands.length; i++) {
                for (int y = 0; y < cardsOnCommunity.length; y++) {
                    if (cardsOnHands[i] == cardsOnCommunity[y]) {
                        fromCommunity++;
                    }
                }
            }
            
            if (valid && fromCommunity >= 3) {
                String[][] temp = new String[opponent_combinations.length + 1][5];
                for (int i = 0; i < opponent_combinations.length; i++) {
                    temp[i] = opponent_combinations[i];
                }
                temp[opponent_combinations.length] = cardsOnHands;
                opponent_combinations = temp;

                System.out.println(Arrays.toString(cardsOnHands));
            }
        }  
        else if (cardsAvailable.length >= (5 - cardsOnHands.length)) {
            ArrayList<String> cards = converter.Array2ArrayList(cardsAvailable);
            cards.remove(0);

            ArrayList<String> temp = converter.Array2ArrayList(cardsOnHands);
            temp.add(cardsAvailable[0]);

            possible_hands_opponent(converter.ArrayList2Array(cards), cardsOnCommunity, converter.ArrayList2Array(temp));
            possible_hands_opponent(converter.ArrayList2Array(cards), cardsOnCommunity, cardsOnHands);
        }
 }